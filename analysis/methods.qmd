---
title: "Methods"
---

 
# Our Project 


This project proposes a set of neighborhood typologies through the lens of amenities available to residents. The aim of this analysis is to provide an up-to-date profile of the amenities available citywide to inform planning, research, and residents and tourists’ understanding of the city. 

<br> </br>

# Data Acqusition and Formattiing

This analysis uses two main data sources: business listings acquired from Yelp Fusion API’s Business Search endpoint <a href="https://github.com/LuckyLaharlTim/MUSA_5500_Final/blame/main/pull_businesses.html"> (R script here)</a> and home listings web-scraped from Zillow. The Yelp data was gathered using the yelpr package in the R programming language. Yelp Fusion’s Business Search endpoint allows for a wide range of search criteria, of which we used location, category, limit, and offset. Location refers to the search area, and can be anything from a ZIP code to the name of a state. Category refers to the type of businesses desired, and can be as specific as “pizza” or as generic as “food.” We had to strike a balance between being specific enough to have a narrow definition that could not be mistaken as various places but broad enough to cover the variations of a specific type of place. An example of this can be the difference between asking for outdoor places versus parks. Places tagged as parks featured everything we would assume to be for parks and recreation. Yet places tagged as outdoor would feature parks as well as rooftop bars, creating an unideal category. Limit is an integer value from 0 to 50, the maximum number of businesses that can be returned in the free version of Yelp Fusion. Offset can be compared to the page number of the search results, such that offset = 1 would access results 51 to 100 of the search, offset = 2 would access 101 to 150, and so on. 
<br></br>
To bypass the 50 result limit, we had to get creative. We made a total of 480 API calls for each “category” (e.g. restaurants, parks, museums) by using a nested for-loop that iterates through each of Philadelphia's 48 ZIP codes and offset values 0 to 10. In each loop, we stored the results of the current ZIP code/offset pair in a nested dataframe. While 480 API calls, equating to 24,000 potential businesses, for each category may seem excessive, this was in response to Yelp’s search algorithm, which starts from the centroid of each search area but runs over to surrounding areas once that one is depleted. We wanted to make sure that we captured all of the businesses in ZIP codes in Center City and other highly dense areas. To make each batch API call, we used a custom function that incorporates the functionality of the yelpr package and also uses the httr package to retrieve our desired fields from the resulting json output. At the end of each call, we had a dataframe of the name, longitude, latitude, address, average rating, and alias of each business in the category. We repeated this process for all of the following broad categories:
<br> </br>
<ul>
  <li>Food</li>
  <li>Parks</li>
  <li>Education</li>
  <li>Grocery</li>
  <li>Entertainment</li>
  <li>Nightlife</li>
  <li>Shopping</li>
  <li>Healthcare</li>
  <li>Historic</li>
  <li>Art</li>
  <li>Beauty</li>
  <li>Kid-Friendly</li>
</ul>
Using the longitude and latitude fields, we converted the data frame into a spatial features object and wrote a total of 14 GeoJSON files to be cleaned, sorted, and analyzed in Python. 

# Cluster Analysis  

In Python, we used the alias field to filter and recategorize amenities within each broad category. In Yelp’s database, businesses are not identified using specific categories, but rather a list of labels collectively known as its alias. For instance, a pizza shop’s alias field may be “pizza, american, italian”. Similarly, a bar may have the alias of “bars, cocktailbars, nightlife”. We created three columns based on this field: desc_1, desc_2, and desc_3, corresponding to the three terms in the alias. Then, we removed and replaced non-pertinent (e.g. barbershop in restaurants) and non-specific (e.g. fooddelivery in restaurants) rows until we were left with a core set of secondary description categories (e.g. pizza, chinese, italian). Following, we combined the cleaned datasets containing businesses from each category, and intersected it with tract, neighborhood, and planning district boundaries for our analysis. Using this dataset, we conducted an exploratory analysis followed by a k-means cluster analysis. In order to conduct a full-cluster analysis we first identified the optimal amount of clusters found using KneeLocator, which automatically compares the optimal amount of clusters through multiple indices. The results below show a gradual decline except for a slight “elbow” point found at 9 on the x-axis. From there we conducted a cluster-analysis on various categories, broad and specific. 
. 


# Limitations 

Our analysis is firstly limited by a number of disparities between the demographics of Yelp’s user base and Philadelphia’s residents. First, Yelp users skew older, with 40% of users over 55 years of age, 35% from 35 to 54, and only 25% from 18 to 34. Philadelphia’s median age is 34.6. In terms of income, Yelp users tend to be higher income. 80% of users make more than $60k per year. By contrast, according to the US Census Bureau, Philadelphia has a median income of $27,331. Finally, 77% of Yelp users hold at least a college degree, compared to 33.6% of Philadelphians. Combined, these disparities suggest that the businesses listed and most reviewed on Yelp do not fully portray the amenity landscape of Philadelphia.
<br> </br>
Using Yelp data presents another challenge: when sorting business listings using the alias field, there appears to be no hierarchy of importance between the three terms in the alias. For instance, in some cases, the first term would be the most specific (e.g. pizza shop) and the third term would be less specific (e.g. food delivery). In other cases, it would be the reverse. Because of this, we had to write a complicated Python script for iterating over the three alias terms for each business and replacing the first term with the second or third when the first term is vague. In cases where all three terms were vague, we searched the business titles for terms suggesting specific restaurant types or cuisines (e.g. pizzeria for pizza, or steaks for sandwich shops). While this iterative process allows us to capture more meaning from our data, it is labor intensive and prone to human error and subjectivity, making it less replicable than simply identifying the first term in the alias field as the business’s subcategory. 
<br></br>
<a href="https://www.yelp-press.com/company/fast-facts/default.aspx">Yelp Fast Facts/Demograhpics Data</a>




